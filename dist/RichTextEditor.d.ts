import { Component } from "react";
import PropTypes from "prop-types";
import WebView, { WebViewMessageEvent } from "react-native-webview";
import { EmitterSubscription, ViewStyle } from "react-native";
declare type PropTypes = {
    initialHTMLValue?: string;
    placeholder?: string;
    onInitialized?: () => {};
    customCSS?: string;
    footerHeight?: number;
    contentInset?: {
        top?: number;
        bottom?: number;
    };
    style?: ViewStyle;
    onChange?: (html: string, text: string) => {};
};
declare type StateType = {
    selectionChangeListeners?: any[];
    onChange?: any[];
    showLinkDialog: boolean;
    linkInitialUrl?: string;
    linkTitle?: string;
    linkUrl?: string;
    keyboardHeight?: number;
};
export default class RichTextEditor<p> extends Component<PropTypes, StateType> {
    static defaultProps: {
        contentInset: {};
    };
    webViewRef: WebView | null;
    _selectedTextChangeListeners: any;
    keyboardEventListeners: EmitterSubscription[];
    constructor(props: PropTypes);
    componentDidMount(): void;
    componentWillUnmount(): void;
    _onKeyboardWillShow(event: any): void;
    _onKeyboardWillHide(): void;
    setEditorAvailableHeightBasedOnKeyboardHeight(keyboardHeight: number): void;
    contentResolve?: any;
    contentReject?: any;
    pendingContentHtml?: number;
    selectedTextResolve?: any;
    selectedTextReject?: any;
    pendingSelectedText?: number;
    onMessage(message: WebViewMessageEvent): void;
    _hideModal(): void;
    handleOnApply: (linkTitle: string, linkUrl: string) => void;
    render(): JSX.Element;
    _sendAction(action: string, data?: any): void;
    showLinkDialog(optionalTitle?: string, optionalUrl?: string): void;
    focusContent(): void;
    registerToolbar(listener: any): void;
    enableOnChange(): void;
    registerContentChangeListener(listener: any): void;
    setContentHTML(html: string): void;
    blurContentEditor(): void;
    setBold(): void;
    setItalic(): void;
    setUnderline(): void;
    heading1(): void;
    heading2(): void;
    heading3(): void;
    heading4(): void;
    heading5(): void;
    heading6(): void;
    setParagraph(): void;
    removeFormat(): void;
    alignLeft(): void;
    alignCenter(): void;
    alignRight(): void;
    alignFull(): void;
    insertBulletsList(): void;
    insertOrderedList(): void;
    insertLink(url?: string, title?: string): void;
    updateLink(url?: string, title?: string): void;
    insertImage(attributes: any): void;
    setSubscript(): void;
    setSuperscript(): void;
    setStrikethrough(): void;
    setHR(): void;
    setIndent(): void;
    setOutdent(): void;
    setBackgroundColor(color: string): void;
    setTextColor(color: string): void;
    setContentPlaceholder(placeholder?: string): void;
    setCustomCSS(css: string): void;
    prepareInsert(): void;
    restoreSelection(): void;
    init(): void;
    setEditorHeight(height: number): void;
    setFooterHeight(): void;
    setPlatform(): void;
    getContentHtml(): Promise<unknown>;
    getSelectedText(): Promise<unknown>;
    contentFocusHandler?: () => {};
    setContentFocusHandler(callbackHandler: () => {}): void;
    addSelectedTextChangeListener(listener: any): void;
}
export {};
